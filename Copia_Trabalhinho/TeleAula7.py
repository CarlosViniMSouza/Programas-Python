import tkinter as tk

root = tk.Tk()
S = tk.Scrollbar(root)
T = tk.Text(root, height=15, width=200)
S.pack(side=tk.RIGHT, fill=tk.Y)
T.pack(side=tk.LEFT, fill=tk.Y)
S.config(command=T.yview)
T.config(yscrollcommand=S.set)
quote = """
('Aula 07 - Funções')\n")
('Temos inumeros modulos de Python em:')\n")
('Banco de dados, Matematica, Engenharia')\n")
('Imagine uma caixa, onde entra uma informação')\n")
('e sai uma informação correspondente com parametros')\n")

('sempre iniciada pela palavra def')\n")
('def <nome-função>(<lista-parâmetros>)')\n")
('...bloco de comandos')\n")
('<nome-função> é o nome da variável ligada a função')\n")
('<lista-parâmetros> são os parâmetros contidos na lista')\n")
('vejamos alguns tipos de função')\n")

("##Primeira função\n")
('Calcule e imprima a soma dos 100 primeiros números')\n")
"Somando1a100 = input()\n")

"def Somando1a100():\n")
"    Soma = 0\n")
"for i in range(1, 101):\n")
"    Soma = Soma + i\n")
"print('Soma = %d' % Soma)\n")
"Somando1a100()\n")

"# alguns OBS sobre o programa\n")
"print('parenteses vazios significam 0 parâmetros')\n")
"print('na linha 8 o programa é executado')\n")
"print('Nenhum valor foi retomado')\n")
"print('Isso é Função: Sem parâmetros e sem retornos')\n")

"##Segunda Função\n")
"print('Calcule e retorne o valor do Somatorio 1 a 100')\n")
"SomatorioDe1a100 = input()\n")
"def SomatorioDe1a100():\n")
"    Soma = 0\n")
"    for i in range(1, 101):\n")
"      Soma = Soma + i\n")
"    return(Soma)\n")
"SomatorioDe1a100()\n")
"print('Soma=d%' % s)\n")
"##Fim do programa\n")

"##OBS sobre esse programa\n")
"print('o processamento iniciado na linha8 vai a linha2')\n")
"print('a função SomatorioDe1a100 é executada e o valor da soma vai pra s')\n")
"print('o processo continua na linha 9')\n")
"print('Isso é Função: sem parâmetro e com retorno')\n")

"##Terceira Função\n")
('Calcule e retorne a soma de n ate m, n<=m')\n")
"SomaNcomM = input()\n")
"def SomaNcomM(n, m):\n")
"    Soma = 0\n")
"    for i in range(n, m + 1):\n")
"       Soma = Soma + 1\n")
"    return(Soma)\n"))
"a, b = 1, 50\n")
"s = SomaNcomM(a, b)\n")
"print('Soma=d%' % s)\n")
"##Fim do programa\n")

"##OBS do programa\n")
"print('O processamento inicia na linha 8 e vai para a 9')\n")
"print('Os valores de a e b são repassados para n e m na função SomaNcomM')\n")
"print('O resto do processo ocrre de forma similar ao anterior')\n")
"input('continuar?: ')\n")

"##OBS PRINCIPAL\n")
"print('o return é utilizado para fevolver o valor da função com seus devidos parâmetros')\n")
"print('Isso é Função: com parâmetros e sem retorno.')\n")

"##Quarto programa\n")
"print('Calcule as somas n+m de n até m, onde n<=m')\n")
"def SomandoNcomM(n, m):\n")
"    Soma = 0\n")
"for i in range(n, m + 1):\n")
"    Soma = Soma + i\n")
"print('Soma = d%' % s)\n")
"n, m = 1, 100\n")
"s = SomandoNcomM(n, m)\n")
"##Fim do Programa\n")

"##OBS do programa\n")
"print('Na linha 9 ocrre a chamada da função nos valores a e b')\n")
"print('Após a execução do programa, nenhum valor é retornado')\n")
"##Novo tópico\n")
"print('Funções chamam Funções')\n")
"print('Uma função pode chamar outra ou mais funções')\n")

"def h():\n")
"    print('3')\n")

"def g():\n")
"    print('6')\n")

"def h():\n")
"    print('3')\n")

"def f():\n")
"    print('7')\n")

"def g():\n")
"    print('10')\n")

"f()\n")

('Fim do programa composto')\n")
("##processo encerrado\n")
('arq010.text','w')\n")
('Na linha 8 a funçāo f é processada e chama a funçāo g')\n")
('Na linha 4 a função g é processada e chama a função h')\n")
('Apos a execução da função h, retorna a função g')\n")
('a função g é processada na linha 9 e vai para funcao f')\n")
('a função é processada na linha 10, onde retorna a linha 12.')\n")
('onde o programa principal retorna a linha 13 e encerra a programação.')\n")

('##Porque usar funções???')\n")
('3 vantagens de se usar funções.')\n")
('economiza códigos')\n")
('códigos mais complexos em pouco espaço')\n")
('facilita correções')\n")
"##Porém\n")
('Requer muitos conhecimentos avançados')\n")
('Má formulação pode tornar o processo de interpretação mais complexo.')\n")
"##Fim da aula 07\n").pack_configure()
"""
T.insert(tk.END, quote)
tk.mainloop()
