from tkinter import *

janela1 = Tk()
janela1.title("Aula01e02")
janela1.geometry("250x200+100+50")

janela2 = Tk()
janela2.title("Aula03")
janela2.geometry("250x200+200+300")

janela3 = Tk()
janela3.title("Aula04")
janela3.geometry("250x200+300+50")

janela4 = Tk()
janela4.title("Aula05")
janela4.geometry("250x200+400+300")

janela5 = Tk()
janela5.title("Aula06")
janela5.geometry("250x200+500+50")

janela6 = Tk()
janela6.title("Aula07")
janela6.geometry("250x200+600+300")

janela7 = Tk()
janela7.title("Aula08")
janela7.geometry("250x200+700+50")

janela8 = Tk()
janela8.title("Aula09")
janela8.geometry("250x200+800+300")

janela9 = Tk()
janela9.title("Aula10")
janela9.geometry("250x200+900+50")

lb1 = Label(janela1, text="print('Aula 01e02 - Introdução ao Python e Entendendo Primeiros conceitos')\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq01.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Variaveis, Numeros, Matematica Basica)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq.write(As variáveis são nomes que damos para referenciar valores ao longo do nosso programa\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Aqui dizemos que x e y são variáveis, eles primeiro armazenaram os valores\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(e depois os usamos para calcular operçaões\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.close()\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq02.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(além disso mudamos o valor que y representava atribuindo a ele o valor 7.\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(podem facilitar a interpretação de um programa.\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write()\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Uma breve observação sobre variáveis em Python\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Variáveis servem para o programa reservar espaço na memoria para um determinado tipo de informação\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(tudo em Python são objetos, então, as variáveis Python armazenam uma referência a um objeto.\n)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq03.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Como representar as variáveis\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write()\n").pack_configure()
lb1 = Label(janela1, text="arq.write(podem possuir caracteres numéricos.\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(não podem ter espaço entre elas\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(não podem começar com números\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(não podem ter caracteres de acentuação tais como ^, ~, !\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(não podem ter caracteres especiais como @, & nem hifens\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(determina vários métodos especiais e variáveis que usam esse padrão\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Na tabela abaixo exemplos de nomes validos e inválidos\n)\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq04.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Nomes de variáveis validos e inválidos\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(area_triangulo' - 'area triangulo' #não é permitido espaço em branco\n").pack_configure()
lb1 = Label(janela1, text="arq.write(samuel_john	samuel_&_john (não são validos caracteres especiais)\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(_inicio total-val (não são valido hifens))\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Por fim, Python diferencia nomes de variáveis\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(com letras maiúsculas e minúsculas exemplo: AREA, Area e area são 3 variáveis diferentes\n)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq05.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Operadores Aritméticos no Python\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(+ - soma\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(– - subtração\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(* - multiplicação\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(/ - divisão\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(// - Divisão trunca a parte fracionaria\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(% - Produz o resto da divisão\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(** - Exponenciação\n)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq06.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Operadores de comparação no Python\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(abs(x) - Retorna o valor absoluto de x\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(pow(x, y) - O mesmo x**y\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(round(x, n) - Retorna um int ou float\n)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open'arq07.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Operadores de Descrição no Python\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write( < - menor que\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(<= - menor ou igual a\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write( > - maior que\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(>= - maior ou igual a\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(== - igual\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(!= - diferente\n)\n").pack_configure()
lb1 = Label(janela1, text="\n").pack_configure()
lb1 = Label(janela1, text="arq = open('arq08.txt','w')\n").pack_configure()
lb1 = Label(janela1, text="arq.write(Operadores Lógicos no Python\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(and P and Q - Resulta 'True' só se P e Q forem verdad\n").pack_configure()
lb1 = Label(janela1, text="arq.write(or P or Q   - Resulta 'False' só se P ou Q forem falsos; se não retorna True\n)\n").pack_configure()
lb1 = Label(janela1, text="arq.write(not P Se P  - Resulta 'False' se P é falso; se não retorna True\n)\n").pack_configure()
lb1 = Label(janela1, text="##fim das aulas 1 e 2##\n").pack_configure()

lb2 = Label(janela2, text="print('Aula 3 - Introdução a listas')\n").pack_configure()
lb2 = Label(janela2, text="print('>>>a = [1,'hello',2]')\n").pack_configure()
lb2 = Label(janela2, text="print('>>>type(a)')\n").pack_configure()
lb2 = Label(janela2, text="print('<class list>')\n").pack_configure()
lb2 = Label(janela2, text="print('Listas são junçoes de inumeros tipos de dados (int, bool, str, float)')\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Comando for e range')\n").pack_configure()
lb2 = Label(janela2, text="print('Sintaxe: for (variavel) in lista:')\n").pack_configure()
lb2 = Label(janela2, text="print('usamos para imprimir numeros em listas')\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex.: nesse caso ele imprime o num escrito 8 vezes')\n").pack_configure()
lb2 = Label(janela2, text="a = int(input('digite numero: '))\n").pack_configure()
lb2 = Label(janela2, text="for i in range(a):\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex2.: nesse caso ele imprime de 2 até 29 se o numero digitado estiver no int(2-29)')\n").pack_configure()
lb2 = Label(janela2, text="a = int(input('digite4.5: '))\n").pack_configure()
lb2 = Label(janela2, text="for i in range(2,30):\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex3.: a lista vai de 100 até 2210, pulando de 100 em 100 numeros')\n").pack_configure()
lb2 = Label(janela2, text="b = int(input('digite5: '))\n").pack_configure()
lb2 = Label(janela2, text="for i in range(100,2201,100):\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('VOLTANDO AO FOR')\n").pack_configure()
lb2 = Label(janela2, text="print('Ex4.: começa no 2 e termina no a+1')\n").pack_configure()
lb2 = Label(janela2, text="c = int(input('digite6: '))\n").pack_configure()
lb2 = Label(janela2, text="for i in range(2,c):\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Variável Acumuladora (A)')\n").pack_configure()
lb2 = Label(janela2, text="print('aqui voce decide a quantia de numeros que serao somados')\n").pack_configure()
lb2 = Label(janela2, text="print('e os proprios numeros a serem somados')\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex5.: Somatorio a ser definido  pelo usuario')\n").pack_configure()
lb2 = Label(janela2, text="d = int(input('digite7: '))\n").pack_configure()
lb2 = Label(janela2, text="A = 0\n").pack_configure()
lb2 = Label(janela2, text="for i in range(d):\n").pack_configure()
lb2 = Label(janela2, text="    B = int(input('digite7.1: '))\n").pack_configure()
lb2 = Label(janela2, text="    A = A + B\n").pack_configure()
lb2 = Label(janela2, text="print(str(A))\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex6.: Calculando potencias de base 2')\n").pack_configure()
lb2 = Label(janela2, text="print('a = int(input(digite8: ))')\n").pack_configure()
lb2 = Label(janela2, text="print('i = 1000')\n").pack_configure()
lb2 = Label(janela2, text="print('A = 1 #correspondendo a 2^0...#')\n").pack_configure()
lb2 = Label(janela2, text="print('while i<=a:')\n").pack_configure()
lb2 = Label(janela2, text="print('print('2^'+str(i)+'='+str(A))')\n").pack_configure()
lb2 = Label(janela2, text="print('i = i+1')\n").pack_configure()
lb2 = Label(janela2, text="print('A = A*2')\n").pack_configure()
lb2 = Label(janela2, text="print(' 'a' é a quantia potenciações a calcular.')\n").pack_configure()
lb2 = Label(janela2, text="print('OBS.: Não executaremos o programa acima pois ele ficará eternamente calculando')\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('Ex7.:Calculando raizes')\n").pack_configure()
lb2 = Label(janela2, text="a = int(input('digite9: '))\n").pack_configure()
lb2 = Label(janela2, text="A = a\n").pack_configure()
lb2 = Label(janela2, text="for A in range(1,a):\n").pack_configure()
lb2 = Label(janela2, text="    A = A*(0.5)\n").pack_configure()
lb2 = Label(janela2, text="print('Raizes: '+str(A))\n").pack_configure()
lb2 = Label(janela2, text="print('a variavel armazenadora dará a raiz, quantas vezes queira'\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('##Comando break')\n").pack_configure()
lb2 = Label(janela2, text="print('termina a execução de uma laço')\n").pack_configure()
lb2 = Label(janela2, text="print('Ex8.: Fazendo um laço ate 'a' ser maior que 'í' ')\n").pack_configure()
lb2 = Label(janela2, text="a = int(input('digite10: '))\n").pack_configure()
lb2 = Label(janela2, text="i = input()\n").pack_configure()
lb2 = Label(janela2, text="for i in range (1,101):\n").pack_configure()
lb2 = Label(janela2, text="    if (i>a):\n").pack_configure()
lb2 = Label(janela2, text="        break\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="print('fim do laço')\n").pack_configure()
lb2 = Label(janela2, text="\n").pack_configure()
lb2 = Label(janela2, text="print('##Comando continue')\n").pack_configure()
lb2 = Label(janela2, text="print('faz a execução de 1 laço ir p/ final.')\n").pack_configure()
lb2 = Label(janela2, text="print('Ex9.: Fazendo mais um laço')\n").pack_configure()
lb2 = Label(janela2, text="a = int(input('digite11: '))\n").pack_configure()
lb2 = Label(janela2, text="i = 20\n").pack_configure()
lb2 = Label(janela2, text="while a<=10:\n").pack_configure()
lb2 = Label(janela2, text="    if (i==5):\n").pack_configure()
lb2 = Label(janela2, text="        continue\n").pack_configure()
lb2 = Label(janela2, text="    print(i)\n").pack_configure()
lb2 = Label(janela2, text="    i = i+1\n").pack_configure()
lb2 = Label(janela2, text="print('fim do laço...')\n").pack_configure()
lb2 = Label(janela2, text="##fim da aula 03##\n").pack_configure()

lb3 = Label(janela3, text="print('Aula 04 - Aprofundando listas')\n").pack_configure()
lb3 = Label(janela3, text="print('listas servem para armazenamento de dados')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex10.: Padrão de guardar notas')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="nota1 = int(input('digite nota1: '))\n").pack_configure()
lb3 = Label(janela3, text="nota2 = int(input('digite nota2: '))\n").pack_configure()
lb3 = Label(janela3, text="nota3 = int(input('digite nota3: '))\n").pack_configure()
lb3 = Label(janela3, text="print((nota1,nota2,nota3))\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('peculiaridade1')\n").pack_configure()
lb3 = Label(janela3, text="print('Observe que valores sairam em cada posição')\n").pack_configure()
lb3 = Label(janela3, text="##programando##\n").pack_configure()
lb3 = Label(janela3, text="print('1 = [0,0,0,0,0]')\n").pack_configure()
lb3 = Label(janela3, text="print('for i in range(7):')\n").pack_configure()
lb3 = Label(janela3, text="print('  1[i] = 7*i')\n").pack_configure()
lb3 = Label(janela3, text="print('(1)')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('peculiaridade2')\n").pack_configure()
lb3 = Label(janela3, text="print('indice negativo infere')\n").pack_configure()
lb3 = Label(janela3, text="print('ler a lista ao contrário')\n").pack_configure()
lb3 = Label(janela3, text="##programando##\n").pack_configure()
lb3 = Label(janela3, text="print('>>>notas=[4.5,8.6,9,7.8,7]')\n").pack_configure()
lb3 = Label(janela3, text="print('>>>notas[-1]')\n").pack_configure()
lb3 = Label(janela3, text="print('7')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="##proximos comandos##\n").pack_configure()
lb3 = Label(janela3, text="print('Comando slicing{operador}')\n").pack_configure()
lb3 = Label(janela3, text="print('gera uma sub-lista na lista quando feito em console')\n").pack_configure()
lb3 = Label(janela3, text="print('variável[ind1:ind2]')\n").pack_configure()
lb3 = Label(janela3, text="print('>>>notas[1.5, 8.4, 9, 5.8, 2, 39.09, 132]')\n").pack_configure()
lb3 = Label(janela3, text="print('>>>notas[1:4]')\n").pack_configure()
lb3 = Label(janela3, text="print('>>>notas[8.4,9,5.8,2]')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('##VOLTANDO PARA O FOR')\n").pack_configure()
lb3 = Label(janela3, text="print('faz a variavel de controle assumir todos os valores')\n").pack_configure()
lb3 = Label(janela3, text="print('Sintaxe:')\n").pack_configure()
lb3 = Label(janela3, text="print('for a in x:')\n").pack_configure()
lb3 = Label(janela3, text="print('   print(x)')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('Operador append')\n").pack_configure()
lb3 = Label(janela3, text="print('sintaxe: lista.append(item)')\n").pack_configure()
lb3 = Label(janela3, text="print('serve para: acrescentar algo na lista, combinar uma lista vazia')\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.11')\n").pack_configure()
lb3 = Label(janela3, text="x = []\n").pack_configure()
lb3 = Label(janela3, text="a = int(input('quantia de int: '))\n").pack_configure()
lb3 = Label(janela3, text="for i in range(a):\n").pack_configure()
lb3 = Label(janela3, text="    dado = int(input('notas: '))\n").pack_configure()
lb3 = Label(janela3, text="    x.append(dado)\n").pack_configure()
lb3 = Label(janela3, text="print(x)\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('##operações matemáticas com listas')\n").pack_configure()
lb3 = Label(janela3, text="print('Somar listas(concatenação) gera outra --> concatenação{L1+L2=L3}')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.12')\n").pack_configure()
lb3 = Label(janela3, text="L1 = input('escrever lista1: ')\n").pack_configure()
lb3 = Label(janela3, text="L2 = input('escrever lista2: ')\n").pack_configure()
lb3 = Label(janela3, text="print([L1]+[L2])\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('##o operador (*) faz repetição')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.13')\n").pack_configure()
lb3 = Label(janela3, text="x = input('escrever lista1: ')\n").pack_configure()
lb3 = Label(janela3, text="print([5*x])\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="##outros metodos de operação##\n").pack_configure()
lb3 = Label(janela3, text="print('##lista.insert(indice,dado)')\n").pack_configure()
lb3 = Label(janela3, text="print('inseri a info antes do indice')\n").pack_configure()
lb3 = Label(janela3, text="vprint('Ex.14')\n").pack_configure()
lb3 = Label(janela3, text="x = [input('escrever lista2: ')]\n").pack_configure()
lb3 = Label(janela3, text="x.insert(0,'99')\n").pack_configure()
lb3 = Label(janela3, text="print([x])\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('##del.lista[posição]')\n").pack_configure()
lb3 = Label(janela3, text="print('remove o item escolhido')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.15')\n").pack_configure()
lb3 = Label(janela3, text="x = int(input['escrever lista3: '])\n").pack_configure()
lb3 = Label(janela3, text="del x[input('digite a posiçao: ')]\n").pack_configure()
lb3 = Label(janela3, text="print(x)\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('del --> remove; mas elimina o num digitado')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.16')\n").pack_configure()
lb3 = Label(janela3, text="x = int(input['escrever lista4: '])\n").pack_configure()
lb3 = Label(janela3, text="x.remove(input('digite o num: '))\n").pack_configure()
lb3 = Label(janela3, text="input('escreva x: ')\n").pack_configure()
lb3 = Label(janela3, text="print([x])\n").pack_configure()
lb3 = Label(janela3, text="\n").pack_configure()
lb3 = Label(janela3, text="print('Inicialização de listas')\n").pack_configure()
lb3 = Label(janela3, text="print('vamos comprimir valores, construindo com 1 laço os valores')\n").pack_configure()
lb3 = Label(janela3, text="print('Ex.17')\n").pack_configure()
lb3 = Label(janela3, text="x = [input('digite lista: ')]\n").pack_configure()
lb3 = Label(janela3, text="a = 5*x\n").pack_configure()
lb3 = Label(janela3, text="print(a)\n").pack_configure()
lb3 = Label(janela3, text="##fim do capítulo de 04##\n").pack_configure()

lb4 = Label(janela4, text="print('Aula 05 - strings')\n").pack_configure()
lb4 = Label(janela4, text="print('são listas imutaveis de caracteres entre aspas')\n").pack_configure()
lb4 = Label(janela4, text="print('exemplo de str.: a = 'abcdef' ')\n").pack_configure()
lb4 = Label(janela4, text="print('veremos alguns comandos para você treinar')\n").pack_configure()
lb4 = Label(janela4, text="print('OBS.: AQUI É APENAS TEXTOS, SEM PROGRAMAS EXEMPLO')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('para cortar o comando e botar na próxima linha = (\ n)')\n").pack_configure()
lb4 = Label(janela4, text="print('aa = abc\ ndef ')\n").pack_configure()
lb4 = Label(janela4, text="print('print(aa)')\n").pack_configure()
lb4 = Label(janela4, text="print('abc')\n").pack_configure()
lb4 = Label(janela4, text="print('def')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('para somar string e reptir as listas = (+ e *)')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>valeu+falou')\n").pack_configure()
lb4 = Label(janela4, text="print('valeufalou')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>3*xyz')\n").pack_configure()
lb4 = Label(janela4, text="print('xyzxyz')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('devolve parte da string = (slice)')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>a = beijo')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>a = [1:4]')\n").pack_configure()
lb4 = Label(janela4, text="print('eo')\n").pack_configure()
lb4 = Label(janela4, text="print('string vazia = ("") ')\n").pack_configure()
lb4 = Label(janela4, text="print('NOTA = teste os comandos depois')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="##funções\n").pack_configure()
lb4 = Label(janela4, text="print('elementos strings podem ser percorridos por laço for')\n").pack_configure()
lb4 = Label(janela4, text="print('Ex.: leia uma string e imprima sua inversa desse jeito:')\n").pack_configure()
lb4 = Label(janela4, text="print(' st = input(digite: )')\n").pack_configure()
lb4 = Label(janela4, text="print('inv = (" ")')\n").pack_configure()
lb4 = Label(janela4, text="print('for x in st')\n").pack_configure()
lb4 = Label(janela4, text="print('    inv = x + inv')\n").pack_configure()
lb4 = Label(janela4, text="print('print(inv)')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="##mais comandos...\n").pack_configure()
lb4 = Label(janela4, text="print('O strip retorna a string original')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>x = \ n abcdef \ n')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>x')\n").pack_configure()
lb4 = Label(janela4, text="print('\ n abcdef \ n')\n").pack_configure()
lb4 = Label(janela4, text="print('print(x)')\n").pack_configure()
lb4 = Label(janela4, text="print('abcndef')\n").pack_configure()
lb4 = Label(janela4, text="print('x.strip()')\n").pack_configure()
lb4 = Label(janela4, text="print('abcndef')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('O operador in verifica se uma substring está contida na string')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>'tho' in 'python' ')\n").pack_configure()
lb4 = Label(janela4, text="print('True')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>'tring' in 'python' ')\n").pack_configure()
lb4 = Label(janela4, text="print('False')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('O método 'find' diz onde localiza-se uma substring')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>p = 'python' ')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>p.find('tho') ')\n").pack_configure()
lb4 = Label(janela4, text="print('2')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('O método 'split(sep)' separa string usando sep como separador')\n").pack_configure()
lb4 = Label(janela4, text="print('a = '1,2,3' ')\n").pack_configure()
lb4 = Label(janela4, text="print('a.split(':') ')\n").pack_configure()
lb4 = Label(janela4, text="print('['1','2','3']')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('O método 'split()' usa \ n e sep')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>b = 'Tratamos disso ontem' ')\n").pack_configure()
lb4 = Label(janela4, text="print('>>>b.split() ')\n").pack_configure()
lb4 = Label(janela4, text="print('['Tratamos'','disso'','ontem']')\n").pack_configure()
lb4 = Label(janela4, text="print('teste as operações depois')\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="print('Operações,funções e métodos')\n").pack_configure()
lb4 = Label(janela4, text="print('Método 'replace' troca as ocorrencias de uma substring por outra na string.')\n").pack_configure()
lb4 = Label(janela4, text="print('Método 'list' torna string em lista de caracteres')\n").pack_configure()
lb4 = Label(janela4, text="print(Método 'join' recebe como lista e retorna uma string concatenada)\n").pack_configure()
lb4 = Label(janela4, text="print(teste as funcionalidades)\n").pack_configure()
lb4 = Label(janela4, text="\n").pack_configure()
lb4 = Label(janela4, text="##fim da Aula 5 STRINGS\n").pack_configure()

lb5 = Label(janela5, text="print('Aula 06 - Matrizes e Vetores')\n").pack_configure()
lb5 = Label(janela5, text="print('Declarando uma matriz com listas')\n").pack_configure()
lb5 = Label(janela5, text="print('para isso utilizamos a seguinte nomenclatura')\n").pack_configure()
lb5 = Label(janela5, text="print('a = input()')\n").pack_configure()
lb5 = Label(janela5, text="print('print([a])')\n").pack_configure()
lb5 = Label(janela5, text="print('o indice do primeiro num es 0')\n").pack_configure()
lb5 = Label(janela5, text="\n").pack_configure()
lb5 = Label(janela5, text="print('criando matriz 3x4 onde cada (i,j) tem valor de ixj, com lacos, repetido i vezes')\n").pack_configure()
lb5 = Label(janela5, text="##coloca valores em matriz\n").pack_configure()
lb5 = Label(janela5, text="print('Ex.18')\n").pack_configure()
lb5 = Label(janela5, text="a = int(input('digite valor1: '))\n").pack_configure()
lb5 = Label(janela5, text="for i in range(a):\n").pack_configure()
lb5 = Label(janela5, text="    b = int(input('digite valor2: '))\n").pack_configure()
lb5 = Label(janela5, text="    for j in range(b):\n").pack_configure()
lb5 = Label(janela5, text="        c = i*j\n").pack_configure()
lb5 = Label(janela5, text="        print(c)\n").pack_configure()
lb5 = Label(janela5, text="\n").pack_configure()
lb5 = Label(janela5, text="print('Acessando dados em listas')\n").pack_configure()
lb5 = Label(janela5, text="print('pode-se usar 1 elem específico da matriz')\n").pack_configure()
lb5 = Label(janela5, text="print('Ex19.: matriz 4x5 iniciando com zeros e lista(0), damos 67 na lista 2 e posição 2')\n").pack_configure()
lb5 = Label(janela5, text="M = [[i*j for j in range(4)] for i in range(5)]\n").pack_configure()
lb5 = Label(janela5, text="M[2][2] = 67\n").pack_configure()
lb5 = Label(janela5, text="print(M)\n").pack_configure()
lb5 = Label(janela5, text="\n").pack_configure()
lb5 = Label(janela5, text="print('OBS.: a matriz implementada em listas tem indice na posicao 1')\n").pack_configure()
lb5 = Label(janela5, text="input()\n").pack_configure()
lb5 = Label(janela5, text="print('Acessando Matrizes')\n").pack_configure()
lb5 = Label(janela5, text="print('Imprime elem da posicao (2,3) da matriz anterior')\n").pack_configure()
lb5 = Label(janela5, text="print('Ex.19:Acessando posicao (2,4) da matriz')\n").pack_configure()
lb5 = Label(janela5, text="M = [[i*j for j in range(5)] for i in range(5)]\n").pack_configure()
lb5 = Label(janela5, text="print(M)\n").pack_configure()
lb5 = Label(janela5, text="print(M[2][3])\n").pack_configure()
lb5 = Label(janela5, text="N = [[i*j for j in range(5)] for i in range(5)]\n").pack_configure()
lb5 = Label(janela5, text="print(N)\n").pack_configure()
lb5 = Label(janela5, text="print(N[2][4])\n").pack_configure()
lb5 = Label(janela5, text="\n").pack_configure()
lb5 = Label(janela5, text="print('Declarando Vetores Multidimensionais')\n").pack_configure()
lb5 = Label(janela5, text="print('Para criar vetores V1 x V2 x ...x Vi... usamos compressao de listas')\n").pack_configure()
lb5 = Label(janela5, text="print('[[...for j in range(n)] for i in range(m)...]]')\n").pack_configure()
lb5 = Label(janela5, text="print('Ex.20')\n").pack_configure()
lb5 = Label(janela5, text="a = int(input('digite valor1: '))\n").pack_configure()
lb5 = Label(janela5, text="b = int(input('digite valor2: '))\n").pack_configure()
lb5 = Label(janela5, text="M = [[i+j for j in range(a)] for i in range(b)]\n").pack_configure()
lb5 = Label(janela5, text="print(M)\n").pack_configure()
lb5 = Label(janela5, text="##Fim da Aula 6 Matrizes e Vetores##\n").pack_configure()

lb6 = Label(janela6, text="print('Aula 07 - Funções')\n").pack_configure()
lb6 = Label(janela6, text="print('Temos inumeros modulos de Python em:')\n").pack_configure()
lb6 = Label(janela6, text="print('Banco de dados, Matematica, Engenharia')\n").pack_configure()
lb6 = Label(janela6, text="print('Imagine uma caixa, onde entra uma informação')\n").pack_configure()
lb6 = Label(janela6, text="print('e sai uma informação correspondente com parametros')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="print('sempre iniciada pela palavra def')\n").pack_configure()
lb6 = Label(janela6, text="print('def <nome-função>(<lista-parâmetros>)')\n").pack_configure()
lb6 = Label(janela6, text="print('...bloco de comandos')\n").pack_configure()
lb6 = Label(janela6, text="print('<nome-função> é o nome da variável ligada a função')\n").pack_configure()
lb6 = Label(janela6, text="print('<lista-parâmetros> são os parâmetros contidos na lista')\n").pack_configure()
lb6 = Label(janela6, text="print('vejamos alguns tipos de função')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##Primeira função\n").pack_configure()
lb6 = Label(janela6, text="print('Calcule e imprima a soma dos 100 primeiros números')\n").pack_configure()
lb6 = Label(janela6, text="Somando1a100 = input()\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def Somando1a100():\n").pack_configure()
lb6 = Label(janela6, text="    Soma = 0\n").pack_configure()
lb6 = Label(janela6, text="for i in range(1, 101):\n").pack_configure()
lb6 = Label(janela6, text="    Soma = Soma + i\n").pack_configure()
lb6 = Label(janela6, text="print('Soma = %d' % Soma)\n").pack_configure()
lb6 = Label(janela6, text="Somando1a100()\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="# alguns OBS sobre o programa\n").pack_configure()
lb6 = Label(janela6, text="print('parenteses vazios significam 0 parâmetros')\n").pack_configure()
lb6 = Label(janela6, text="print('na linha 8 o programa é executado')\n").pack_configure()
lb6 = Label(janela6, text="print('Nenhum valor foi retomado')\n").pack_configure()
lb6 = Label(janela6, text="print('Isso é Função: Sem parâmetros e sem retornos')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##Segunda Função\n").pack_configure()
lb6 = Label(janela6, text="print('Calcule e retorne o valor do Somatorio 1 a 100')\n").pack_configure()
lb6 = Label(janela6, text="SomatorioDe1a100 = input()\n").pack_configure()
lb6 = Label(janela6, text="def SomatorioDe1a100():\n").pack_configure()
lb6 = Label(janela6, text="    Soma = 0\n").pack_configure()
lb6 = Label(janela6, text="    for i in range(1, 101):\n").pack_configure()
lb6 = Label(janela6, text="      Soma = Soma + i\n").pack_configure()
lb6 = Label(janela6, text="    return(Soma)\n").pack_configure()
lb6 = Label(janela6, text="SomatorioDe1a100()\n").pack_configure()
lb6 = Label(janela6, text="print('Soma=d%' % s)\n").pack_configure()
lb6 = Label(janela6, text="##Fim do programa\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##OBS sobre esse programa\n").pack_configure()
lb6 = Label(janela6, text="print('o processamento iniciado na linha8 vai a linha2')\n").pack_configure()
lb6 = Label(janela6, text="print('a função SomatorioDe1a100 é executada e o valor da soma vai pra s')\n").pack_configure()
lb6 = Label(janela6, text="print('o processo continua na linha 9')\n").pack_configure()
lb6 = Label(janela6, text="print('Isso é Função: sem parâmetro e com retorno')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##Terceira Função\n").pack_configure()
lb6 = Label(janela6, text="print('Calcule e retorne a soma de n ate m, n<=m')\n").pack_configure()
lb6 = Label(janela6, text="SomaNcomM = input()\n").pack_configure()
lb6 = Label(janela6, text="def SomaNcomM(n, m):\n").pack_configure()
lb6 = Label(janela6, text="    Soma = 0\n").pack_configure()
lb6 = Label(janela6, text="    for i in range(n, m + 1):\n").pack_configure()
lb6 = Label(janela6, text="       Soma = Soma + 1\n").pack_configure()
lb6 = Label(janela6, text="    return(Soma)\n").pack_configure()
lb6 = Label(janela6, text="a, b = 1, 50\n").pack_configure()
lb6 = Label(janela6, text="s = SomaNcomM(a, b)\n").pack_configure()
lb6 = Label(janela6, text="print('Soma=d%' % s)\n").pack_configure()
lb6 = Label(janela6, text="##Fim do programa\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##OBS do programa\n").pack_configure()
lb6 = Label(janela6, text="print('O processamento inicia na linha 8 e vai para a 9')\n").pack_configure()
lb6 = Label(janela6, text="print('Os valores de a e b são repassados para n e m na função SomaNcomM')\n").pack_configure()
lb6 = Label(janela6, text="print('O resto do processo ocrre de forma similar ao anterior')\n").pack_configure()
lb6 = Label(janela6, text="input('continuar?: ')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##OBS PRINCIPAL\n").pack_configure()
lb6 = Label(janela6, text="print('o return é utilizado para fevolver o valor da função com seus devidos parâmetros')\n").pack_configure()
lb6 = Label(janela6, text="print('Isso é Função: com parâmetros e sem retorno.')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##Quarto programa\n").pack_configure()
lb6 = Label(janela6, text="print('Calcule as somas n+m de n até m, onde n<=m')\n").pack_configure()
lb6 = Label(janela6, text="def SomandoNcomM(n, m):\n").pack_configure()
lb6 = Label(janela6, text="    Soma = 0\n").pack_configure()
lb6 = Label(janela6, text="for i in range(n, m + 1):\n").pack_configure()
lb6 = Label(janela6, text="    Soma = Soma + i\n").pack_configure()
lb6 = Label(janela6, text="print('Soma = d%' % s)\n").pack_configure()
lb6 = Label(janela6, text="n, m = 1, 100\n").pack_configure()
lb6 = Label(janela6, text="s = SomandoNcomM(n, m)\n").pack_configure()
lb6 = Label(janela6, text="##Fim do Programa\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="##OBS do programa\n").pack_configure()
lb6 = Label(janela6, text="print('Na linha 9 ocrre a chamada da função nos valores a e b')\n").pack_configure()
lb6 = Label(janela6, text="print('Após a execução do programa, nenhum valor é retornado')\n").pack_configure()
lb6 = Label(janela6, text="##Novo tópico\n").pack_configure()
lb6 = Label(janela6, text="print('Funções chamam Funções')\n").pack_configure()
lb6 = Label(janela6, text="print('Uma função pode chamar outra ou mais funções')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def h():\n").pack_configure()
lb6 = Label(janela6, text="    print('3')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def g():\n").pack_configure()
lb6 = Label(janela6, text="    print('6')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def h():\n").pack_configure()
lb6 = Label(janela6, text="    print('3')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def f():\n").pack_configure()
lb6 = Label(janela6, text="    print('7')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="def g():\n").pack_configure()
lb6 = Label(janela6, text="    print('10')\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="f()\n").pack_configure()
lb6 = Label(janela6, text="\n").pack_configure()
lb6 = Label(janela6, text="print('Fim do programa composto')\n").pack_configure()
lb6 = Label(janela6, text="##processo encerrado\n").pack_configure()
lb6 = Label(janela6, text="arq = open('arq010.text','w')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('Na linha 8 a funçāo f é processada e chama a funçāo g\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('Na linha 4 a função g é processada e chama a função h\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('Apos a execução da função h, retorna a função g\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('a função g é processada na linha 9 e vai para funcao f\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('a função é processada na linha 10, onde retorna a linha 12.\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('onde o programa principal retorna a linha 13 e encerra a programação.\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('##Porque usar funções???\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('3 vantagens de se usar funções.\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('economiza códigos\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('códigos mais complexos em pouco espaço\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('facilita correções\n')\n").pack_configure()
lb6 = Label(janela6, text="##Porém\n").pack_configure()
lb6 = Label(janela6, text="arq.write('Requer muitos conhecimentos avançados\n')\n").pack_configure()
lb6 = Label(janela6, text="arq.write('Má formulação pode tornar o processo de interpretação mais complexo.\n')\n").pack_configure()
lb6 = Label(janela6, text="##Fim da aula 07\n").pack_configure()

lb7 = Label(janela7, text='print("Aula 08 - Modulos no Python")\n').pack_configure()
lb7 = Label(janela7, text='print("Nessa parte da programacao, veremos como trabalhar com Documentos Python")\n').pack_configure()
lb7 = Label(janela7, text='print("Vejamos un exemplo: Escrever um arquivo")\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='print("Teste de abertura de arquivos em Python:")\n').pack_configure()
lb7 = Label(janela7, text='print("Tentando abrir um arquivo de texto armazenado no PC:")\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arquivo.txt","r")\n').pack_configure()
lb7 = Label(janela7, text='for linha in arq:\n').pack_configure()
lb7 = Label(janela7, text='    linha = linha.rstrip()\n').pack_configure()
lb7 = Label(janela7, text='    print(linha)\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='print("Contando linhas do arquivo")\n').pack_configure()
lb7 = Label(janela7, text='cont = 0\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arquivo.txt","r")\n').pack_configure()
lb7 = Label(janela7, text='for linha in arq:\n').pack_configure()
lb7 = Label(janela7, text='    cont+=1\n').pack_configure()
lb7 = Label(janela7, text='print("Numero de linhas no arquivo: ",cont)\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='print("Retorna apenas as linhas com a palavra python:")\n').pack_configure()
lb7 = Label(janela7, text='cont=0\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arquivo.txt","r")\n').pack_configure()
lb7 = Label(janela7, text='for linha in arq:\n').pack_configure()
lb7 = Label(janela7, text='    linha = linha.strip()\n').pack_configure()
lb7 = Label(janela7, text='    if "Python" in linha:\n').pack_configure()
lb7 = Label(janela7, text='        cont+=1\n').pack_configure()
lb7 = Label(janela7, text='        print(linha)\n').pack_configure()
lb7 = Label(janela7, text='print("Foram encontradas", cont, "linhas")\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='##fim da execução##\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='print("Veja um exemplo de Leitura de Arquivos")\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arq01.txt","w")\n').pack_configure()
lb7 = Label(janela7, text='arq.write("Universidade do Estado do Amazonas\n")\n').pack_configure()
lb7 = Label(janela7, text='arq.write("Fazendo arquivos de texto com Python\n")\n').pack_configure()
lb7 = Label(janela7, text='arq.write("Documento criado para aulas de LP basica\n")\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='##Leitura do arquivo##\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arq01.txt","r")\n').pack_configure()
lb7 = Label(janela7, text='for linha in arq:\n').pack_configure()
lb7 = Label(janela7, text='    linha = linha.strip()\n').pack_configure()
lb7 = Label(janela7, text='    print(linha)\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='##acrescentando algo no arquivo##\n').pack_configure()
lb7 = Label(janela7, text='texto = input("Digite: ")\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arq01.txt","a")\n').pack_configure()
lb7 = Label(janela7, text='arq.write(texto + "\n")\n').pack_configure()
lb7 = Label(janela7, text='print("Operador concluido do arquivo" + arq.name + " usando o mode de acesso" + arq.mode + "\n")\n').pack_configure()
lb7 = Label(janela7, text='arq.close\n').pack_configure()
lb7 = Label(janela7, text='\n').pack_configure()
lb7 = Label(janela7, text='print("\nTexto:")\n').pack_configure()
lb7 = Label(janela7, text='arq = open("arq01.txt","r")\n').pack_configure()
lb7 = Label(janela7, text='for linha in arq:\n').pack_configure()
lb7 = Label(janela7, text='    linha = linha.strip()\n').pack_configure()
lb7 = Label(janela7, text='    print(linha)\n').pack_configure()
lb7 = Label(janela7, text='arq.close()\n').pack_configure()
lb7 = Label(janela7, text='##fim do programa##\n').pack_configure()
lb7 = Label(janela7, text='##fim da aula 08##\n').pack_configure()

lb8 = Label(janela8, text="print('Aula 09 - Modulo')\n").pack_configure()
lb8 = Label(janela8, text="print('Um módulo é simplesmente um arquivo contendo códigos Python que podem ser explorados por outros programas.')\n").pack_configure()
lb8 = Label(janela8, text="print('Um módulo completo pode ser chamado por outros programas através da declaração import (importar).')\n").pack_configure()
lb8 = Label(janela8, text="print('OBS: ')\n").pack_configure()
lb8 = Label(janela8, text="print('só podemos importar módulos para um programa se eles estiverem dentro do mesmo diretório.')\n").pack_configure()
lb8 = Label(janela8, text="print('editando código do programa area.py das funções retangulo, triangulo e circulo mostrados abaixo:')\n").pack_configure()
lb8 = Label(janela8, text="\n").pack_configure()
lb8 = Label(janela8, text="def __retangulo__(lado_a, lado_b):\n").pack_configure()
lb8 = Label(janela8, text="    '''Calculando a área de um retângulo'''\n").pack_configure()
lb8 = Label(janela8, text="    area = lado_a * lado_b\n").pack_configure()
lb8 = Label(janela8, text="    return area\n").pack_configure()
lb8 = Label(janela8, text="def __triangulo__(lado, altura):\n").pack_configure()
lb8 = Label(janela8, text="    '''Calculando a área de um triângulo'''\n").pack_configure()
lb8 = Label(janela8, text="    area = (lado * altura) / 2\n").pack_configure()
lb8 = Label(janela8, text="    return area\n").pack_configure()
lb8 = Label(janela8, text="def __circulo__(raio):\n").pack_configure()
lb8 = Label(janela8, text="    '''Calculando a área de um círculo'''\n").pack_configure()
lb8 = Label(janela8, text="    area = 3.14 * (raio ** 2)\n").pack_configure()
lb8 = Label(janela8, text="    return area\n").pack_configure()
lb8 = Label(janela8, text="##Programa finalizado##\n").pack_configure()
lb8 = Label(janela8, text="\n").pack_configure()
lb8 = Label(janela8, text="print('O area.py esta pronto para servir como um módulo.')\n").pack_configure()
lb8 = Label(janela8, text="print('Se quisermos usar suas funções ')\n").pack_configure()
lb8 = Label(janela8, text="print('devemos usar a declaração 'import' para importar area.py.')\n").pack_configure()
lb8 = Label(janela8, text="\n").pack_configure()
lb8 = Label(janela8, text="arq = open('arq011.txt', 'w')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>> import area\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>> ajuda(area)\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>> area.retangulo(20, 10)\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('200\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>> area.triangulo(6, 5)\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('15.0\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>> area.circulo(4)\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('50.24\')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('>>>\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('Módulos podem ser muito grandes.\n)\n").pack_configure()
lb8 = Label(janela8, text="arq.write('Python tem “baterias inseridas”, possuindo uma biblioteca de módulos\n')\n").pack_configure()
lb8 = Label(janela8, text="arq.write('Busque um módulo na biblioteca padrão do Python ou no site PyPI\n')\n").pack_configure()
lb8 = Label(janela8, text="##fim da aula 09##\n").pack_configure()

lb9 = Label(janela9, text="print('Aula 10 - Dicionarios')\n").pack_configure()
lb9 = Label(janela9, text='print("Dicionários não possuem uma noção de índice e não podem ser fatiados.")\n').pack_configure()
lb9 = Label(janela9, text='print("Dicionários são mutáveis de forma que a qualquer momento você pode inserir ou remover itens.")\n').pack_configure()
lb9 = Label(janela9, text='print("Criando Dicionários")\n').pack_configure()
lb9 = Label(janela9, text='print("Dicionários são criados colocando")\n').pack_configure()
lb9 = Label(janela9, text='print("os pares chave: valor entre chaves {} das seguinte forma:")\n').pack_configure()
lb9 = Label(janela9, text='print("Nomes são as chaves e as linguagens de programação são os valores associados as chaves.")\n').pack_configure()
lb9 = Label(janela9, text='print("Outra forma de gerar o mesmo dicionário acima é com ditc(x) onde x")\n').pack_configure()
lb9 = Label(janela9, text='print("pode ser uma lista de tuplas do tipo (chave, valor) como mostrado abaixo:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("di = dict([(‘Julio’, ‘Pascal’), (‘Bruno’, ‘Python’), (‘Ana’, ‘Ruby’), (‘Luisa’, ‘Java’), (‘Mauro’, ‘PHP’)])")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Um dicionário vazio")\n').pack_configure()
lb9 = Label(janela9, text='print("é criado com as chaves em branco:")\n').pack_configure()
lb9 = Label(janela9, text='print("di = {}")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Acessando itens de um dicionário")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Para acessar um item do dicionário devemos usar sua chave entre colchetes [ ],")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java}")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> di[Ana]")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Ruby")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> x = di[Julio]")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> print(x)")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("C")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Recuperando um valor no dicionário com o método get()")\n').pack_configure()
lb9 = Label(janela9, text='print("Para recuperar um valor no dicionário podemos usar o método get")\n').pack_configure()
lb9 = Label(janela9, text='print("passando como argumento a chave do valor que queremos recuperar:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Ana: Ruby, Paulo: C++, Mauro: Swift, Julio: Pascal, Luisa: Java, Bruno: Python}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> linguagem = di.get(Ana)")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(linguagem)")\n').pack_configure()
lb9 = Label(janela9, text='print("Ruby")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Percorrendo dicionários com for")\n').pack_configure()
lb9 = Label(janela9, text='print("Podemos percorrer um dicionário com "for")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='#Programa para percorrer um dicionário\n').pack_configure()
lb9 = Label(janela9, text='print("linguagens =  {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='print("for chave in linguagens:")\n').pack_configure()
lb9 = Label(janela9, text='print("    print(chave, programa em:, linguagens[chave])")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Alterando um valor em um dicionário")\n').pack_configure()
lb9 = Label(janela9, text='print("Para alterar uma valor em um dicionário use o nome do dicionário")\n').pack_configure()
lb9 = Label(janela9, text='print("com a chave entre colchetes e associe um novo valor a chave:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di[Jaime] = PHP")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di")\n').pack_configure()
lb9 = Label(janela9, text='print("{Luisa: Java, Bruno: PHP, Julio: Pascal, Mauro: PHP, Ana: Ruby}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Inserindo um item em um dicionário")\n').pack_configure()
lb9 = Label(janela9, text='("Para inserir um item em um dicionário basta declarar o dicionário colocando")\n').pack_configure()
lb9 = Label(janela9, text='print("entre colchetes a nova chave e atribuindo uma valor a ela:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {França: Paris, Espanha: Madri, Itália: Roma}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(di)")\n').pack_configure()
lb9 = Label(janela9, text='print("{Espanha: Madri, França: Paris, Itália: Roma}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di[Russia] = Moscou")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(di)")\n').pack_configure()
lb9 = Label(janela9, text='print("{Espanha: Madri, França: Paris, Itália: Roma, Russia: Moscou}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Inserindo itens ou alterando itens em um dicionário com o método update()")\n').pack_configure()
lb9 = Label(janela9, text='print("O método update tem a seguinte sintaxe di.update(t) onde di e t são dicionários")\n').pack_configure()
lb9 = Label(janela9, text='print("e cada par chave, valor de t é adicionado. Se uma chave de t já estiver definida em di ela recebe o valor t:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(di)")\n').pack_configure()
lb9 = Label(janela9, text='print("{Ana: Ruby, Bruno: Python, Mauro: PHP, Luisa: Java, Julio: Pascal}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di.update({Paulo: C++, Mauro: Swift})")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(di)")\n').pack_configure()
lb9 = Label(janela9, text='print("{Ana: Ruby, Paulo: C++, Mauro: Swift, Julio: Pascal, Luisa: Java, Bruno: Python}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Removendo um par chave, valor de um dicionário usando o comando del")\n').pack_configure()
lb9 = Label(janela9, text='print("Use del aplicado a o nome do dicionário com a chave")\n').pack_configure()
lb9 = Label(janela9, text='print("entre colchetes para apagar um par chave, valor do dicionário:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Luisa: Java, Bruno: Python, Julio: Pascal, Mauro: PHP, Ana: Ruby}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> del di[Mauro]")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di")\n').pack_configure()
lb9 = Label(janela9, text='print("{Luisa: Java, Bruno: Python, Julio: Pascal, Ana: Ruby}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Removendo e obtendo um par chave, valor com o método pop()")\n').pack_configure()
lb9 = Label(janela9, text='print("Parecido com listas pop remove o par chave, valor retornando o valor associado,")\n').pack_configure()
lb9 = Label(janela9, text='print("mas, como dicionários não são ordenados, deve-se passa-los como argumento a chave k do par a ser removido:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> v = di.pop(Bruno)")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(v)")\n').pack_configure()
lb9 = Label(janela9, text='print("Python")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print("Podemos ainda adicionar um parâmetro extra pop(a, b) onde o parâmetro extra")\n').pack_configure()
lb9 = Label(janela9, text='print("substitui o valor retornado caso a chave k não conste do dicionário:")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='print(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> b = di.pop(Eduarda, Não existe)")\n').pack_configure()
lb9 = Label(janela9, text='print(">>> print(b)")\n').pack_configure()
lb9 = Label(janela9, text='print("Não existe")\n').pack_configure()
lb9 = Label(janela9, text='print(">>>")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Visualizações de dicionários")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("método	descrição keys()")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Retorna uma visualização de todas as chaves de um dicionário.")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("values()	Retorna uma visualização de todas os valores de um dicionário.")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("items()	Retorna uma visualização de todos pares (chave, valor) de um dicionário.")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Abaixo no interpretador python3 vemos uma visão x criada a partir do dicionário di:")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> x = di.keys()")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> print(x)")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("dict_keys([Julio, Laura, Mauro, Ana, Bruno])")\n').pack_configure()
lb9 = Label(janela9, text='\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Visualizações continuam atreladas ao dicionário")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Em Python 2 estes métodos retornavam uma lista, mas, em Python 3 eles passaram a retornar visões.")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("A grande diferença e que as visões ou visualizações e que elas continuam atreladas ao dicionário e")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("Criando uma visão x dos valores do dicionário di abaixo")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("e depois apagar o par (Ana, Ruby), veja os resultados pelo interpretador abaixo:")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> di = {Julio: Pascal, Bruno: Python, Ana: Ruby, Luisa: Java, Mauro: PHP}")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> x = di.values()")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> print(x)")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("dict_values([Pascal, Java, PHP, Python, Ruby])")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> del di[Ana]")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>> print(x)")\n').pack_configure()
lb9 = Label(janela9, text='arq.write("dict_values([Pascal, Java, PHP, Python])")\n').pack_configure()
lb9 = Label(janela9, text='arq.write(">>>")\n').pack_configure()
lb9 = Label(janela9, text='##fim da aula 10##\n').pack_configure()

janela1.mainloop()

janela2.mainloop()

janela3.mainloop()

janela4.mainloop()

janela5.mainloop()

janela6.mainloop()

janela7.mainloop()

janela8.mainloop()

janela9.mainloop()
##Terminou....